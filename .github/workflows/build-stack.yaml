name: Build Stack

on: 
  workflow_call:
    inputs:
      chartVersion:
        description: 'opencost chart version'     
        required: false
        type: string
        default: 'latest'
      oc-container-version:
        description: 'oc container version'
        required: false
        type: string
        default: 'latest'
      oc-ui-version:
        description: 'oc ui container version'
        required: false
        type: string
        default: 'latest'
      prometheus:
        description: 'promless'
        required: false
        type: boolean
        default: true
      namespace:
        description: 'namespace to deploy to'
        required: false
        type: string
        default: 'default'
jobs:
  build-stack:
    runs-on: ubuntu-latest

    steps:
      # Setup OCI CLI
      - name: Install OCI CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Configure OCI CLI
        env:
          OCI_KEY: ${{ secrets.OCI_KEY }}
          OCI_USER: ${{ secrets.OCI_USER }}
          OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
          OCI_TENANCY: ${{ secrets.OCI_TENANCY }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          mkdir -p ~/.oci
          echo "$OCI_KEY" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=$OCI_USER
          fingerprint=$OCI_FINGERPRINT
          tenancy=$OCI_TENANCY
          region=$OCI_REGION
          key_file=~/.oci/oci_api_key.pem
          EOF
          oci setup repair-file-permissions --file /home/runner/.oci/config 

      - name: Get OKE kubeconfig
        env:
          OCI_CLUSTER_ID: ${{ secrets.OCI_CLUSTER_ID }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_TOKEN_VERSION: 2.0.0
        run: |
          oci ce cluster create-kubeconfig \
            --cluster-id $OCI_CLUSTER_ID \
            --file $HOME/.kube/config \
            --region $OCI_REGION \
            --token-version $OCI_TOKEN_VERSION
      - id: get-namespace-name
        env:
          TARGET_NAMESPACE: ${{ inputs.namespace }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          if [[ "default" != "$TARGET_NAMESPACE" ]]; then
            echo "TARGET_NAMESPACE=${TARGET_NAMESPACE}" >> $GITHUB_ENV
          else
            echo "TARGET_NAMESPACE=gh-build-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          fi
      - id: setup-kubectl
        uses: azure/setup-kubectl@v4
      - name: delete old stack if still up
        env:
          TARGET_NAMESPACE: ${{ inputs.namespace }}
        run: |
          if kubectl get ns $TARGET_NAMESPACE; then

              echo "namespace $TARGET_NAMESPACE exists, checking status"
              if kubectl get ns $TARGET_NAMESPACE -o json | jq -r '.status.phase' | grep -q "Terminating"; then
                echo "namespace $TARGET_NAMESPACE is already in Terminating state, waiting for deletion"
                count=0
                while kubectl get ns $TARGET_NAMESPACE >/dev/null 2>&1; do
                  if [ $count -ge 120 ]; then
                    echo "Timed out waiting for namespace $TARGET_NAMESPACE to be deleted"
                    exit 1
                  fi
                  echo "Waiting for namespace $TARGET_NAMESPACE to be deleted..."
                  sleep 3
                  count=$((count + 1))
                done
                exit 0
              fi
              
              echo "namespace $TARGET_NAMESPACE exists and is not terminating, proceeding with deletion"
              releases=$(helm ls --namespace $TARGET_NAMESPACE |  awk '{print $1}' | tail -n +2)
              for release in ${releases}; do
                  helm uninstall ${release} --namespace $TARGET_NAMESPACE
              done
              sleep 5
              kubectl delete ns $TARGET_NAMESPACE --wait=false
              count=0
              while kubectl get ns $TARGET_NAMESPACE >/dev/null 2>&1; do
                  if [ $count -ge 120 ]; then
                      echo "Timed out waiting for namespace $TARGET_NAMESPACE to be deleted"
                      exit 1
                  fi
                  echo "Waiting for namespace $TARGET_NAMESPACE to be deleted..."
                  sleep 3
                  count=$((count + 1))
              done
          else
              echo "namespace $TARGET_NAMESPACE does not exist"
          fi 
      - name: create namespace
        env:
          TARGET_NAMESPACE: ${{ inputs.namespace }}
        run: |
          kubectl create namespace $TARGET_NAMESPACE
      - name: get ns
        run: |
          kubectl get ns
     
      - id: create-pod-disruption-budget
        env:
          TARGET_NAMESPACE: ${{ inputs.namespace }}
        run: |
          kubectl -n $TARGET_NAMESPACE apply -f - <<EOF
          apiVersion: policy/v1
          kind: PodDisruptionBudget
          metadata:
            name: test-env-pdb
            namespace: $TARGET_NAMESPACE
          spec:
            maxUnavailable: 0
            selector: {}
          EOF
      
      - name: Deploy OC chart with helm
        env:
          TARGET_NAMESPACE: ${{ inputs.namespace }}
          CHART_VERSION: ${{ inputs.chartVersion }}
          OC_CONTAINER_VERSION: ${{ inputs.oc-container-version }}
          OC_UI_VERSION: ${{ inputs.oc-ui-version }}
          PROMETHEUS: ${{ inputs.prometheus }}
          PROMLESS: ${{ !inputs.prometheus }}
        run: |
          set -e
          versionOpts=""
          if [[ "latest" != "$CHART_VERSION" ]]; then
            versionOpts="--version $CHART_VERSION"
          fi
  
          containerOpts=""
          if [[ "latest" != "$OC_CONTAINER_VERSION" ]]; then
            containerOpts="--set opencost.exporter.image.fullImageName=$OC_CONTAINER_VERSION"
          else
            echo "building on latest dev container version"
            containerOpts="--set opencost.exporter.image.fullImageName=ghcr.io/opencost/opencost:develop-latest"
          fi

          # if [[ "latest" != "$OC_UI_VERSION" ]]; then
          #   containerOpts+=" --set opencost.ui.image.fullImageName=$OC_UI_VERSION"
          # else
          #   echo "building on latest dev container version"
          #   containerOpts+=" --set opencost.ui.image.fullImageName=ghcr.io/opencost/opencost-ui:develop-latest"
          # fi
              
          echo "
          opencost:
            exporter:
              collectorDataSource:
                enabled: ${PROMLESS}
              prometheusDataSource:
                queryResolutionSeconds: "60"
            ui:
              ingress:
                enabled: true
                ingressClassName: \"nginx\"
                annotations:
                  kubernetes.io/ingress.class: nginx
                hosts:
                  - host: ${TARGET_NAMESPACE}.infra.opencost.io
                    paths:
                      - /
            prometheus:
              enabled: ${PROMETHEUS}
              internal:
                  serviceName: prometheus-kube-prometheus-prometheus
                  port: 9090
            
          " > /tmp/values.yaml
          
          
          echo "values.yaml: $(cat /tmp/values.yaml)"

          echo "version opts: '$versionOpts'"
          echo "container opts: '$containerOpts'"
          helm install --repo https://opencost.github.io/opencost-helm-chart $TARGET_NAMESPACE opencost \
            -n $TARGET_NAMESPACE \
            -f /tmp/values.yaml \
            $versionOpts $containerOpts
