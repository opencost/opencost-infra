name: Build Stack

on: 
  workflow_call:
    inputs:
      chartVersion:
        description: 'opencost chart version'     
        required: false
        type: string
        default: 'latest'
      oc-container-version:
        description: 'oc container version'
        required: false
        type: string
        default: 'latest'
      oc-ui-version:
        description: 'oc ui container version'
        required: false
        type: string
        default: 'latest'
      namespace:
        description: 'namespace to deploy to'
        required: false
        type: string
        default: 'default'
jobs:
  build-stack:
    runs-on: ubuntu-latest

    steps:
      # Setup OCI CLI
      - name: Install OCI CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY }}
          region=${{ secrets.OCI_REGION }}
          key_file=~/.oci/oci_api_key.pem
          EOF
          oci setup repair-file-permissions --file /home/runner/.oci/config 

      - name: Get OKE kubeconfig
        run: |
          oci ce cluster create-kubeconfig \
            --cluster-id ${{ secrets.OCI_CLUSTER_ID }} \
            --file $HOME/.kube/config \
            --region ${{ secrets.OCI_REGION }} \
            --token-version 2.0.0
      - id: get-namespace-name
        run: |
          if [[ "default" != "${{ inputs.namespace }}" ]]; then
            echo "TARGET_NAMESPACE=${{ inputs.namespace }}" >> $GITHUB_ENV
          else
            echo "TARGET_NAMESPACE=gh-build-${{ github.run_number }}" >> $GITHUB_ENV
          fi
      - id: setup-kubectl
        uses: azure/setup-kubectl@v4
      - name: delete old stack if still up
        run: |
          if kubectl get ns ${{ inputs.namespace }}; then

              echo "namespace ${{ inputs.namespace }} exists, checking status"
              if kubectl get ns ${{ inputs.namespace }} -o json | jq -r '.status.phase' | grep -q "Terminating"; then
                echo "namespace ${{ inputs.namespace }} is already in Terminating state, waiting for deletion"
                count=0
                while kubectl get ns ${{ inputs.namespace }} >/dev/null 2>&1; do
                  if [ $count -ge 120 ]; then
                    echo "Timed out waiting for namespace ${{ inputs.namespace }} to be deleted"
                    exit 1
                  fi
                  echo "Waiting for namespace ${{ inputs.namespace }} to be deleted..."
                  sleep 3
                  count=$((count + 1))
                done
                exit 0
              fi
              
              echo "namespace ${{ inputs.namespace }} exists and is not terminating, proceeding with deletion"
              releases=$(helm ls --namespace ${{ inputs.namespace }} |  awk '{print $1}' | tail -n +2)
              for release in ${releases}; do
                  helm uninstall ${release} --namespace ${{ inputs.namespace }}
              done
              sleep 5
              kubectl delete ns ${{ inputs.namespace }} --wait=false
              count=0
              while kubectl get ns ${{ inputs.namespace }} >/dev/null 2>&1; do
                  if [ $count -ge 120 ]; then
                      echo "Timed out waiting for namespace ${{ inputs.namespace }} to be deleted"
                      exit 1
                  fi
                  echo "Waiting for namespace ${{ inputs.namespace }} to be deleted..."
                  sleep 3
                  count=$((count + 1))
              done
          else
              echo "namespace ${{ inputs.namespace }} does not exist"
          fi 
      - name: create namespace
        run: |
          kubectl create namespace ${{ env.TARGET_NAMESPACE }}
      - name: get ns
        run: |
          kubectl get ns
     
      - id: create-pod-disruption-budget
        run: |
          kubectl -n ${{ env.TARGET_NAMESPACE }} apply -f - <<EOF
          apiVersion: policy/v1
          kind: PodDisruptionBudget
          metadata:
            name: test-env-pdb
            namespace: ${{ env.TARGET_NAMESPACE }}
          spec:
            maxUnavailable: 0
            selector: {}
          EOF
      
      - name: Deploy OC chart with helm
        run: |
          set -e
          versionOpts=""
          if [[ "latest" != "${{ inputs.chartVersion }}" ]]; then
            versionOpts="--version ${{ inputs.chartVersion }}"
          fi
  
          containerOpts=""
          if [[ "latest" != "${{ inputs.oc-container-version }}" ]]; then
            containerOpts="--set opencost.exporter.image.fullImageName=${{ inputs.oc-container-version }}"
          else
            echo "building on latest dev container version"
            containerOpts="--set opencost.exporter.image.fullImageName=ghcr.io/opencost/opencost:develop-latest"
          fi

          # if [[ "latest" != "${{ inputs.oc-ui-version }}" ]]; then
          #   containerOpts+=" --set opencost.ui.image.fullImageName=${{ inputs.oc-ui-version }}"
          # else
          #   echo "building on latest dev container version"
          #   containerOpts+=" --set opencost.ui.image.fullImageName=ghcr.io/opencost/opencost-ui:develop-latest"
          # fi

    
          echo '
          opencost:
            ui:
              ingress:
                enabled: true
                ingressClassName: "nginx"
                annotations:
                  kubernetes.io/ingress.class: nginx
                hosts:
                  - host: ${{ env.TARGET_NAMESPACE }}.infra.opencost.io
                    paths:
                      - /
            prometheus:
              internal:
                serviceName: prometheus-kube-prometheus-prometheus.prometheus-system.svc.cluster.local
                port: 9090
          ' > /tmp/values.yaml
          
          
          echo "values.yaml: $(cat /tmp/values.yaml)"

          echo "version opts: '$versionOpts'"
          echo "container opts: '$containerOpts'"
          helm install --repo https://opencost.github.io/opencost-helm-chart ${{ env.TARGET_NAMESPACE }} opencost \
            -n ${{ env.TARGET_NAMESPACE }} \
            -f /tmp/values.yaml \
            $versionOpts $containerOpts
